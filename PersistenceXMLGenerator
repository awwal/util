public PersistenceXMLGenerator {
	
	private static List findClasses(File directory, String packageName) throws ClassNotFoundException {
        List classes = new ArrayList();
        if (!directory.exists()) {
            return classes;
        }
        File[] files = directory.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                assert !file.getName().contains(".");
                classes.addAll(findClasses(file, packageName + "." + file.getName()));
            } else if (file.getName().endsWith(".class")) {
                classes.add(Class.forName(packageName + '.' + file.getName().substring(0, file.getName().length() - 6)));
            }
        }
        return classes;
    }
	
	
	
	 private static Class[] getClasses(String packageName)
	            throws ClassNotFoundException, IOException {
	        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
	        assert classLoader != null;
	        String path = packageName.replace('.', '/');
	        Enumeration resources = classLoader.getResources(path);
	        List<File> dirs = new ArrayList<File>();
	        while (resources.hasMoreElements()) {
	            URL resource = (URL) resources.nextElement();
	            dirs.add(new File(resource.getFile()));
	        }
	        ArrayList classes = new ArrayList();
	        for (File directory : dirs) {
	            classes.addAll(findClasses(directory, packageName));
	        }
	        return (Class[]) classes.toArray(new Class[classes.size()]);
	    }
	
	
	public static void main(String[] args) throws ClassNotFoundException, IOException {
		
		
		Class[] classex = getClasses(PersistenceObject.class.getPackage().getName());
	    for (Class c : classex) {
	        if (c.getName().contains("$")) continue;
	        if (!c.isAnnotationPresent(javax.persistence.Entity.class)) continue;
	        System.out.println("<class>" + c.getName() + "</class>");
	    }
	    
	    
	}
}
